import os
import asyncio
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from pytgcalls import PyTgCalls
from pytgcalls.types import Update
from pytgcalls.types.input_stream import InputAudioStream
from pytgcalls.types.input_stream.quality import HighQualityAudio
from youtube_dl import YoutubeDL
from config import API_ID, API_HASH, BOT_TOKEN, SESSION_NAME
from utils.queue import MusicQueue
from utils.helpers import download_youtube_audio, format_duration, get_youtube_details

# Initialize bot and user clients
bot = Client(
    "MusicBot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# User account client for playing music
user = Client(
    "MusicPlayer",
    api_id=API_ID,
    api_hash=API_HASH,
    session_string=SESSION_NAME
)

# Initialize PyTgCalls
call_py = PyTgCalls(user)

# Initialize music queues for different chats
music_queue = MusicQueue()

# YouTube DL options
ydl_opts = {
    "format": "bestaudio/best",
    "extractaudio": True,
    "audio-format": "mp3",
    "outtmpl": "downloads/%(title)s.%(ext)s",
}

@bot.on_message(filters.command("start"))
async def start_command(_, message: Message):
    await message.reply_text(
        "üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§è‡§ï ‡§Æ‡•ç‡§Ø‡•Ç‡§ú‡§ø‡§ï ‡§¨‡•â‡§ü ‡§π‡•Ç‡§Ç‡•§\n\n"
        "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•Ä ‡§µ‡•â‡§á‡§∏ ‡§ö‡•à‡§ü ‡§Æ‡•á‡§Ç ‡§ó‡§æ‡§®‡•á ‡§¨‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§\n\n"
        "‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§ï‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è /help ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "‚ûï ‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§™‡§®‡•á ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§ê‡§° ‡§ï‡§∞‡•á‡§Ç",
                    url=f"https://t.me/{(await bot.get_me()).username}?startgroup=true"
                )
            ],
            [
                InlineKeyboardButton(
                    "üë®‚Äçüíª ‡§°‡•á‡§µ‡§≤‡§™‡§∞",
                    url="https://t.me/R4jeshh"
                )
            ]
        ])
    )

@bot.on_message(filters.command("help"))
async def help_command(_, message: Message):
    await message.reply_text(
        "**üéµ ‡§Æ‡•ç‡§Ø‡•Ç‡§ú‡§ø‡§ï ‡§¨‡•â‡§ü ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏:**\n\n"
        "/play [song name/URL] - ‡§ó‡§æ‡§®‡§æ ‡§¨‡§ú‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è\n"
        "/pause - ‡§ó‡§æ‡§®‡§æ ‡§™‡•â‡§ú ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è\n"
        "/resume - ‡§ó‡§æ‡§®‡§æ ‡§∞‡§ø‡§ú‡•ç‡§Ø‡•Ç‡§Æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è\n"
        "/skip - ‡§Ö‡§ó‡§≤‡§æ ‡§ó‡§æ‡§®‡§æ ‡§¨‡§ú‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è\n"
        "/stop - ‡§ó‡§æ‡§®‡§æ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è\n"
        "/queue - ‡§ï‡§§‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§≤‡§ó‡•á ‡§ó‡§æ‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è\n"
        "/join - ‡§µ‡•â‡§á‡§∏ ‡§ö‡•à‡§ü ‡§Æ‡•á‡§Ç ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è\n"
        "/leave - ‡§µ‡•â‡§á‡§∏ ‡§ö‡•à‡§ü ‡§õ‡•ã‡§°‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è"
    )

@bot.on_message(filters.command("play"))
async def play_command(_, message: Message):
    try:
        # Check if user is in voice chat
        if not message.from_user:
            await message.reply_text("‚ö†Ô∏è ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•á‡§µ‡§≤ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ!")
            return

        if not message.chat.type in ["group", "supergroup"]:
            await message.reply_text("‚ö†Ô∏è ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•á‡§µ‡§≤ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ!")
            return

        # Get the song query
        if len(message.command) < 2:
            await message.reply_text("‚ö†Ô∏è ‡§ó‡§æ‡§®‡•á ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§Ø‡§æ URL ‡§¶‡•á‡§Ç!")
            return

        query = " ".join(message.command[1:])
        status_msg = await message.reply_text("üîç ‡§ñ‡•ã‡§ú ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç...")

        # Get song details
        try:
            song_info = await get_youtube_details(query)
            if not song_info:
                await status_msg.edit_text("‚ùå ‡§ó‡§æ‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ!")
                return
        except Exception as e:
            await status_msg.edit_text(f"‚ùå ‡§è‡§∞‡§∞: {str(e)}")
            return

        # Download and process
        try:
            audio_file = await download_youtube_audio(song_info['url'], ydl_opts)
            if not audio_file:
                await status_msg.edit_text("‚ùå ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§™‡§æ‡§Ø‡§æ!")
                return
        except Exception as e:
            await status_msg.edit_text(f"‚ùå ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§è‡§∞‡§∞: {str(e)}")
            return

        # Add to queue
        song_item = {
            'title': song_info['title'],
            'duration': song_info['duration'],
            'file': audio_file,
            'requested_by': message.from_user.mention
        }

        # Add to queue and start playing if not already playing
        position = music_queue.add(message.chat.id, song_item)
        
        if position == 0 and not call_py.get_active_call(message.chat.id):
            await start_playing(message.chat.id)
            await status_msg.edit_text(
                f"‚ñ∂Ô∏è ‡§Ö‡§¨ ‡§¨‡§ú ‡§∞‡§π‡§æ ‡§π‡•à:\n"
                f"üìÄ {song_info['title']}\n"
                f"‚è± ‡§∏‡§Æ‡§Ø: {format_duration(song_info['duration'])}\n"
                f"üë§ ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü: {message.from_user.mention}"
            )
        else:
            await status_msg.edit_text(
                f"üìù ‡§ï‡§§‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ({position}):\n"
                f"üìÄ {song_info['title']}\n"
                f"‚è± ‡§∏‡§Æ‡§Ø: {format_duration(song_info['duration'])}\n"
                f"üë§ ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü: {message.from_user.mention}"
            )

    except Exception as e:
        await message.reply_text(f"‚ùå ‡§è‡§∞‡§∞: {str(e)}")

async def start_playing(chat_id):
    while True:
        if not music_queue.is_empty(chat_id):
            song = music_queue.get_current(chat_id)
            try:
                await call_py.join_group_call(
                    chat_id,
                    InputAudioStream(
                        song['file'],
                        HighQualityAudio(),
                    )
                )
                # Wait until song finishes
                await asyncio.sleep(song['duration'])
                # Remove the played song and move to next
                music_queue.remove(chat_id)
            except Exception as e:
                print(f"Error playing song: {str(e)}")
                music_queue.remove(chat_id)
        else:
            await call_py.leave_group_call(chat_id)
            break

@bot.on_message(filters.command("pause"))
async def pause_command(_, message: Message):
    try:
        if await call_py.pause_stream(message.chat.id):
            await message.reply_text("‚è∏Ô∏è ‡§ó‡§æ‡§®‡§æ ‡§™‡•â‡§ú ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à")
    except Exception as e:
        await message.reply_text(f"‚ùå ‡§è‡§∞‡§∞: {str(e)}")

@bot.on_message(filters.command("resume"))
async def resume_command(_, message: Message):
    try:
        if await call_py.resume_stream(message.chat.id):
            await message.reply_text("‚ñ∂Ô∏è ‡§ó‡§æ‡§®‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à")
    except Exception as e:
        await message.reply_text(f"‚ùå ‡§è‡§∞‡§∞: {str(e)}")

@bot.on_message(filters.command("stop"))
async def stop_command(_, message: Message):
    try:
        music_queue.clear(message.chat.id)
        await call_py.leave_group_call(message.chat.id)
        await message.reply_text("‚èπÔ∏è ‡§ó‡§æ‡§®‡§æ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à")
    except Exception as e:
        await message.reply_text(f"‚ùå ‡§è‡§∞‡§∞: {str(e)}")

@bot.on_message(filters.command("skip"))
async def skip_command(_, message: Message):
    try:
        if music_queue.is_empty(message.chat.id):
            await message.reply_text("‚ö†Ô∏è ‡§ï‡§§‡§æ‡§∞ ‡§ñ‡§æ‡§≤‡•Ä ‡§π‡•à")
            return

        music_queue.remove(message.chat.id)
        await start_playing(message.chat.id)
        await message.reply_text("‚è≠Ô∏è ‡§Ö‡§ó‡§≤‡§æ ‡§ó‡§æ‡§®‡§æ ‡§¨‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç")
    except Exception as e:
        await message.reply_text(f"‚ùå ‡§è‡§∞‡§∞: {str(e)}")

@bot.on_message(filters.command("queue"))
async def queue_command(_, message: Message):
    try:
        if music_queue.is_empty(message.chat.id):
            await message.reply_text("‚ö†Ô∏è ‡§ï‡§§‡§æ‡§∞ ‡§ñ‡§æ‡§≤‡•Ä ‡§π‡•à")
            return

        queue_list = "üìù **‡§ï‡§§‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§≤‡§ó‡•á ‡§ó‡§æ‡§®‡•á:**\n\n"
        for i, song in enumerate(music_queue.get_queue(message.chat.id), 1):
            queue_list += f"{i}. {song['title']} | ‚è± {format_duration(song['duration'])} | üë§ {song['requested_by']}\n"

        await message.reply_text(queue_list)
    except Exception as e:
        await message.reply_text(f"‚ùå ‡§è‡§∞‡§∞: {str(e)}")

@bot.on_message(filters.command(["join", "userbotjoin"]))
async def join_command(_, message: Message):
    try:
        if not message.from_user:
            await message.reply_text("‚ö†Ô∏è ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•á‡§µ‡§≤ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ!")
            return

        if not message.chat.type in ["group", "supergroup"]:
            await message.reply_text("‚ö†Ô∏è ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•á‡§µ‡§≤ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ!")
            return

        chat_id = message.chat.id
        await user.join_chat(message.chat.username or message.chat.id)
        await message.reply_text("‚úÖ ‡§Ø‡•Ç‡§ú‡§∞‡§¨‡•â‡§ü ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§ú‡•â‡§á‡§® ‡§ï‡§∞ ‡§ó‡§Ø‡§æ ‡§π‡•à!")
    except Exception as e:
        await message.reply_text(f"‚ùå ‡§è‡§∞‡§∞: {str(e)}")

@bot.on_message(filters.command("leave"))
async def leave_command(_, message: Message):
    try:
        await user.leave_chat(message.chat.id)
        await message.reply_text("üëã ‡§Ø‡•Ç‡§ú‡§∞‡§¨‡•â‡§ü ‡§®‡•á ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§õ‡•ã‡§°‡§º ‡§¶‡§ø‡§Ø‡§æ ‡§π‡•à!")
    except Exception as e:
        await message.reply_text(f"‚ùå ‡§è‡§∞‡§∞: {str(e)}")

# Start the bot
async def start_bot():
    await bot.start()
    await user.start()
    await call_py.start()
    print("üéµ ‡§Æ‡•ç‡§Ø‡•Ç‡§ú‡§ø‡§ï ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à!")
    await idle()

if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(start_bot())
