import os
from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
import yt_dlp
import asyncio
from datetime import datetime
import math
import re
from urllib.parse import urlparse

# Environment variables рд╕реЗ configuration
bot = Client(
    "MusicDLBot",
    api_id=os.environ.get("API_ID"),
    api_hash=os.environ.get("API_HASH"),
    bot_token=os.environ.get("BOT_TOKEN")
)

# Configs
DOWNLOAD_LOCATION = "./downloads"
MAX_DURATION = 15  # minutes
AUTO_DELETE = 300  # seconds (5 minutes)

# рдпреВрдЯреНрдпреВрдм DL options
ydl_opts = {
    'format': 'bestaudio/best',
    'prefer_ffmpeg': True,
    'outtmpl': f'{DOWNLOAD_LOCATION}/%(title)s.%(ext)s',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '320',
    }],
}

# Folders create
if not os.path.exists(DOWNLOAD_LOCATION):
    os.makedirs(DOWNLOAD_LOCATION)

# Helpers
def get_readable_time(seconds: int) -> str:
    """Seconds рдХреЛ readable format рдореЗрдВ convert рдХрд░рддрд╛ рд╣реИ"""
    minutes, seconds = divmod(seconds, 60)
    hours, minutes = divmod(minutes, 60)
    if hours > 0:
        return f'{hours:02d}:{minutes:02d}:{seconds:02d}'
    else:
        return f'{minutes:02d}:{seconds:02d}'

def get_readable_size(size_in_bytes: int) -> str:
    """Bytes рдХреЛ readable format рдореЗрдВ convert рдХрд░рддрд╛ рд╣реИ"""
    if size_in_bytes is None:
        return '0B'
    size_units = ['B', 'KB', 'MB', 'GB', 'TB']
    index = 0
    while size_in_bytes >= 1024 and index < len(size_units) - 1:
        size_in_bytes /= 1024
        index += 1
    return f'{size_in_bytes:.2f}{size_units[index]}'

def get_progress_bar(current: int, total: int, length: int = 10) -> str:
    """Progress bar generate рдХрд░рддрд╛ рд╣реИ"""
    if total == 0:
        return 'тЦС' * length
    filled_length = int(length * current // total)
    return 'тЦИ' * filled_length + 'тЦС' * (length - filled_length)

async def delete_message_after_delay(message: Message, delay: int):
    """Message рдХреЛ delay рдХреЗ рдмрд╛рдж delete рдХрд░рддрд╛ рд╣реИ"""
    await asyncio.sleep(delay)
    try:
        await message.delete()
    except:
        pass

# Message texts
START_TEXT = """
ЁЯО╡ **рдирдорд╕реНрдХрд╛рд░! рдореИрдВ рдореНрдпреВрдЬрд┐рдХ рдбрд╛рдЙрдирд▓реЛрдбрд░ рдмреЙрдЯ рд╣реВрдВ** ЁЯО╡

рдореИрдВ рдЖрдкрдХреЗ рд▓рд┐рдП YouTube рд╕реЗ рдЧрд╛рдиреЗ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ рдФрд░ рдЙрдиреНрд╣реЗрдВ HQ MP3 format рдореЗрдВ рднреЗрдЬ рд╕рдХрддрд╛ рд╣реВрдВред

**ЁЯУЪ рдХрдорд╛рдВрдбреНрд╕:**
тАв `/song` - рдЧрд╛рдирд╛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ (рдирд╛рдо рдпрд╛ рд▓рд┐рдВрдХ)
тАв `/about` - рдмреЙрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдиреЗрдВ
тАв `/help` - рдорджрдж рдореЗрдиреВ

**ЁЯФН рдЙрджрд╛рд╣рд░рдг:**
`/song Tum Hi Ho`
`/song https://youtube.com/...`

**тЪбя╕П рдлреАрдЪрд░реНрд╕:**
тАв рдЙрдЪреНрдЪ рдЧреБрдгрд╡рддреНрддрд╛ (320Kbps)
тАв рддреЗрдЬрд╝ рдбрд╛рдЙрдирд▓реЛрдб
тАв рдердореНрдмрдиреЗрд▓ рдФрд░ рдореЗрдЯрд╛рдбреЗрдЯрд╛
тАв рдкреНрд░реЛрдЧреНрд░реЗрд╕ рдЕрдкрдбреЗрдЯреНрд╕
"""

HELP_TEXT = """
ЁЯУЪ **рдорджрдж рдореЗрдиреВ | Help Menu**

**ЁЯО╡ рдЧрд╛рдирд╛ рдбрд╛рдЙрдирд▓реЛрдб рдХреИрд╕реЗ рдХрд░реЗрдВ?**

1я╕ПтГг `/song` рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
2я╕ПтГг рдЧрд╛рдиреЗ рдХрд╛ рдирд╛рдо рдпрд╛ YouTube рд▓рд┐рдВрдХ рджреЗрдВ
3я╕ПтГг рдмреЙрдЯ рдЧрд╛рдирд╛ рдЦреЛрдЬреЗрдЧрд╛ рдФрд░ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдЧрд╛
4я╕ПтГг рдЖрдкрдХреЛ HQ MP3 рдлрд╛рдЗрд▓ рдорд┐рд▓ рдЬрд╛рдПрдЧреА

**ЁЯУЭ рдЙрджрд╛рд╣рд░рдг:**
тАв `/song Tum Hi Ho`
тАв `/song Shape of You`
тАв `/song https://youtube.com/...`

**тЪая╕П рд╕реАрдорд╛рдПрдВ:**
тАв рдЕрдзрд┐рдХрддрдо рдЕрд╡рдзрд┐: 15 рдорд┐рдирдЯ
тАв рдЕрдзрд┐рдХрддрдо рд╕рд╛рдЗрдЬрд╝: 50MB
тАв рдлреЙрд░реНрдореЗрдЯ: MP3 (320Kbps)

**тЭУ рдХреЛрдИ рд╕рдорд╕реНрдпрд╛?**
@R4jeshh рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ
"""

ABOUT_TEXT = """
**ЁЯдЦ рдмреЙрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ**

**ЁЯО╡ рдирд╛рдо:** Music Downloader Bot
**ЁЯСитАНЁЯТ╗ рдбреЗрд╡рд▓рдкрд░:** @R4jeshh
**ЁЯУЪ рд▓рд╛рдЗрдмреНрд░реЗрд░реА:** Pyrogram
**ЁЯОЮ рд╕реЛрд░реНрд╕:** YouTube
**ЁЯО╣ рдХреНрд╡рд╛рд▓рд┐рдЯреА:** 320Kbps MP3

**тЪбя╕П рдлреАрдЪрд░реНрд╕:**
тАв HQ рдореНрдпреВрдЬрд┐рдХ рдбрд╛рдЙрдирд▓реЛрдб
тАв рдлрд╛рд╕реНрдЯ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ
тАв рдкреНрд░реЛрдЧреНрд░реЗрд╕ рдЕрдкрдбреЗрдЯреНрд╕
тАв рдердореНрдмрдиреЗрд▓ рд╕рдкреЛрд░реНрдЯ
тАв рдЗрдВрдЯреЗрд▓рд┐рдЬреЗрдВрдЯ рдПрд░рд░ рд╣реИрдВрдбрд▓рд┐рдВрдЧ

**ЁЯУК рд╕реНрдЯреИрдЯреНрд╕:**
тАв рдбрд╛рдЙрдирд▓реЛрдб: {downloads_count}
тАв рд▓рд╛рд╕реНрдЯ рдЕрдкрдбреЗрдЯ: {last_update}

**ЁЯФЧ рд▓рд┐рдВрдХреНрд╕:**
тАв [GitHub](https://github.com/yourusername/music-dl-bot)
тАв [рдбреЗрд╡рд▓рдкрд░](https://t.me/R4jeshh)
"""

# Handlers
@bot.on_message(filters.command("start"))
async def start_command(_, message: Message):
    await message.reply_text(
        START_TEXT,
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("тЭУ рдорджрдж", callback_data="help"),
                InlineKeyboardButton("тД╣я╕П рдЬрд╛рдирдХрд╛рд░реА", callback_data="about")
            ],
            [InlineKeyboardButton("ЁЯСитАНЁЯТ╗ рдбреЗрд╡рд▓рдкрд░", url="https://t.me/R4jeshh")]
        ]),
        disable_web_page_preview=True
    )

@bot.on_message(filters.command("help"))
async def help_command(_, message: Message):
    await message.reply_text(
        HELP_TEXT,
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("ЁЯСитАНЁЯТ╗ рдбреЗрд╡рд▓рдкрд░", url="https://t.me/R4jeshh")
        ]]),
        disable_web_page_preview=True
    )

@bot.on_message(filters.command("about"))
async def about_command(_, message: Message):
    current_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
    await message.reply_text(
        ABOUT_TEXT.format(
            downloads_count="1000+",
            last_update=current_time
        ),
        disable_web_page_preview=True
    )

@bot.on_message(filters.command(["song", "music", "dl"]))
async def song_command(_, message: Message):
    try:
        # Check query
        if len(message.command) < 2:
            await message.reply_text(
                "тЪая╕П рдХреГрдкрдпрд╛ рдЧрд╛рдиреЗ рдХрд╛ рдирд╛рдо рдпрд╛ рд▓рд┐рдВрдХ рджреЗрдВ!\n\n"
                "ЁЯУЭ рдЙрджрд╛рд╣рд░рдг:\n"
                "`/song Tum Hi Ho`\n"
                "`/song https://youtube.com/...`"
            )
            return

        query = " ".join(message.command[1:])
        status_msg = await message.reply_text("ЁЯФН рдЦреЛрдЬ рд░рд╣рд╛ рд╣реВрдВ...")

        # Get video info
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            try:
                info = ydl.extract_info(f"ytsearch:{query}", download=False)['entries'][0]
            except:
                await status_msg.edit_text("тЭМ рдЧрд╛рдирд╛ рдирд╣реАрдВ рдорд┐рд▓рд╛!")
                return

            # Check duration
            if int(info['duration']) > MAX_DURATION * 60:
                await status_msg.edit_text(
                    f"тЭМ {MAX_DURATION} рдорд┐рдирдЯ рд╕реЗ рд▓рдВрдмреЗ рдЧрд╛рдиреЗ рдбрд╛рдЙрдирд▓реЛрдб рдирд╣реАрдВ рдХрд┐рдП рдЬрд╛ рд╕рдХрддреЗ!"
                )
                return

            # Update status with details
            await status_msg.edit_text(
                f"ЁЯУе рдбрд╛рдЙрдирд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ:\n\n"
                f"ЁЯО╡ **{info['title']}**\n"
                f"тП▒ **рд╕рдордп:** {get_readable_time(info['duration'])}\n"
                f"ЁЯСБ **рд╡реНрдпреВрдЬ:** {info['view_count']:,}\n"
                f"ЁЯСд **рдЪреИрдирд▓:** {info['uploader']}\n\n"
                f"тЦ▒тЦ▒тЦ▒тЦ▒тЦ▒тЦ▒тЦ▒тЦ▒тЦ▒тЦ▒ 0%"
            )

            # Download
            file_path = await bot.loop.run_in_executor(None, lambda: ydl.download([info['webpage_url']]))

            # Find downloaded file
            for file in os.listdir(DOWNLOAD_LOCATION):
                if file.endswith(".mp3"):
                    audio_path = os.path.join(DOWNLOAD_LOCATION, file)
                    
                    # Get file size
                    file_size = os.path.getsize(audio_path)
                    
                    # Send audio
                    await message.reply_audio(
                        audio_path,
                        title=info['title'],
                        performer=info['uploader'],
                        duration=int(info['duration']),
                        thumb=info.get('thumbnail'),
                        caption=(
                            f"ЁЯО╡ **{info['title']}**\n"
                            f"тП▒ **рд╕рдордп:** {get_readable_time(info['duration'])}\n"
                            f"ЁЯТ┐ **рд╕рд╛рдЗрдЬрд╝:** {get_readable_size(file_size)}\n"
                            f"ЁЯО╝ **рдмрд┐рдЯрд░реЗрдЯ:** 320Kbps\n\n"
                            f"ЁЯСитАНЁЯТ╗ **@R4jeshh рджреНрд╡рд╛рд░рд╛**"
                        )
                    )
                    
                    # Cleanup
                    os.remove(audio_path)
                    await status_msg.delete()
                    break

    except Exception as e:
        await status_msg.edit_text(f"тЭМ рдПрд░рд░: {str(e)}")

@bot.on_callback_query()
async def callback_handler(_, callback_query: CallbackQuery):
    if callback_query.data == "help":
        await callback_query.message.edit_text(
            HELP_TEXT,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data="start")
            ]]),
        )
    elif callback_query.data == "about":
        current_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
        await callback_query.message.edit_text(
            ABOUT_TEXT.format(
                downloads_count="1000+",
                last_update=current_time
            ),
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data="start")
            ]]),
        )
    elif callback_query.data == "start":
        await callback_query.message.edit_text(
            START_TEXT,
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("тЭУ рдорджрдж", callback_data="help"),
                    InlineKeyboardButton("тД╣я╕П рдЬрд╛рдирдХрд╛рд░реА", callback_data="about")
                ],
                [InlineKeyboardButton("ЁЯСитАНЁЯТ╗ рдбреЗрд╡рд▓рдкрд░", url="https://t.me/R4jeshh")]
            ]),
        )

    await callback_query.answer()

# Error Handler
@bot.on_message(filters.error)
async def error_handler(_, message: Message):
    await message.reply_text(
        "тЭМ рдХреБрдЫ рдЧрдбрд╝рдмрдбрд╝ рд╣реЛ рдЧрдИ!\n"
        "рдХреГрдкрдпрд╛ рдереЛрдбрд╝реА рджреЗрд░ рдмрд╛рдж рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред\n\n"
        "рдЕрдЧрд░ рд╕рдорд╕реНрдпрд╛ рдмрдиреА рд░рд╣реЗ рддреЛ @R4jeshh рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред"
    )

print("ЁЯО╡ рдмреЙрдЯ рд╕реНрдЯрд╛рд░реНрдЯ рд╣реЛ рд░рд╣рд╛ рд╣реИ...")
bot.run()
